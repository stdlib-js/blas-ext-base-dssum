// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
var e,r;e=this,r=function(e){"use strict";var r="function"==typeof Object.defineProperty?Object.defineProperty:null,t=Object.defineProperty,n=Object.prototype,o=n.toString,i=n.__defineGetter__,u=n.__defineSetter__,a=n.__lookupGetter__,f=n.__lookupSetter__,l=function(){try{return r({},"x",{}),!0}catch(e){return!1}}()?t:function(e,r,t){var l,c,_,p;if("object"!=typeof e||null===e||"[object Array]"===o.call(e))throw new TypeError("invalid argument. First argument must be an object. Value: `"+e+"`.");if("object"!=typeof t||null===t||"[object Array]"===o.call(t))throw new TypeError("invalid argument. Property descriptor must be an object. Value: `"+t+"`.");if((c="value"in t)&&(a.call(e,r)||f.call(e,r)?(l=e.__proto__,e.__proto__=n,delete e[r],e[r]=t.value,e.__proto__=l):e[r]=t.value),_="get"in t,p="set"in t,c&&(_||p))throw new Error("invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.");return _&&i&&i.call(e,r,t.get),p&&u&&u.call(e,r,t.set),e};function c(e,r,t){l(e,r,{configurable:!1,enumerable:!1,writable:!1,value:t})}var _=Math.floor;function p(e,r,t,n){var o,i,u,a,f,l,c,d,s,y,b,v,j;if(e<=0)return 0;if(1===e||0===t)return r[n];if(o=n,e<8){for(b=0,j=0;j<e;j++)b+=r[o],o+=t;return b}if(e<=128){for(i=r[o],u=r[o+t],a=r[o+2*t],f=r[o+3*t],l=r[o+4*t],c=r[o+5*t],d=r[o+6*t],s=r[o+7*t],o+=8*t,y=e%8,j=8;j<e-y;j+=8)i+=r[o],u+=r[o+t],a+=r[o+2*t],f+=r[o+3*t],l+=r[o+4*t],c+=r[o+5*t],d+=r[o+6*t],s+=r[o+7*t],o+=8*t;for(b=i+u+(a+f)+(l+c+(d+s));j<e;j++)b+=r[o],o+=t;return b}return v=_(e/2),p(v-=v%8,r,t,o)+p(e-v,r,t,o+v*t)}function d(e,r,t){var n,o,i;if(e<=0)return 0;if(1===e||0===t)return r[0];if(n=t<0?(1-e)*t:0,e<8){for(o=0,i=0;i<e;i++)o+=r[n],n+=t;return o}return p(e,r,t,n)}function s(e,r,t){return d(e,r,t)}function y(e,r,t,n){return p(e,r,t,n)}c(d,"ndarray",p),c(s,"ndarray",y),e.default=s,e.ndarray=y,Object.defineProperty(e,"__esModule",{value:!0})},"object"==typeof exports&&"undefined"!=typeof module?r(exports):"function"==typeof define&&define.amd?define(["exports"],r):r((e="undefined"!=typeof globalThis?globalThis:e||self).dssum={});
//# sourceMappingURL=browser.js.map
